////////////////////////////////////////////////////////////
// NodeSystem.hpp
//
// Created by Thomas Kilsby on 06/04/2014.
// Copyright (c) 2014 Thomas Kilsby. All rights reserved.
////////////////////////////////////////////////////////////
#pragma once

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <entityx/entityx.h>
#include "Core/Logger.hpp"
#include "CoreComponents/CNode.hpp"

////////////////////////////////////////////////////////////
/// \brief System for managing all the CNodes and node graphs.
////////////////////////////////////////////////////////////
class NodeSystem
: public entityx::System<NodeSystem>
, public entityx::Receiver<NodeSystem>
{
public:
    ////////////////////////////////////////////////////////////
    /// \brief Default constructor.
    ////////////////////////////////////////////////////////////
            NodeSystem();
                    
    ////////////////////////////////////////////////////////////
    /// \brief Default destructor
    ////////////////////////////////////////////////////////////                        
            ~NodeSystem();
                    
    ////////////////////////////////////////////////////////////
    /// \brief Configures any event handlers.
    /// \param events The EventManager.
    ////////////////////////////////////////////////////////////
    void    configure(entityx::EventManager& events) override;

    ////////////////////////////////////////////////////////////
    /// \brief Updates the System.
    /// \param entities The EntityManager.
    /// \param events The EventManager.
    /// \param dt The delta time.
    ////////////////////////////////////////////////////////////
    void    update(entityx::EntityManager& entities,
            entityx::EventManager& events, float dt) override;
            
    ////////////////////////////////////////////////////////////
    /// \brief Event handler for CNode component removed event.
    /// \param events The EventManager.
    ////////////////////////////////////////////////////////////            
    void    receive(const entityx::ComponentRemovedEvent<CNode>& event);
    
    ////////////////////////////////////////////////////////////
    /// \brief Event handler for entity destroyed event.
    /// \param events The EventManager.
    ////////////////////////////////////////////////////////////   
    void    receive(const entityx::EntityDestroyedEvent& event);

private:
    void    updateOrigin(entityx::Entity entity);

    ////////////////////////////////////////////////////////////
    /// \brief Updates the World sf::Transform of the entity.
    /// \param entity The entity to update.
    ////////////////////////////////////////////////////////////   
    void    updateWorldTransform(entityx::Entity entity);
    
    ////////////////////////////////////////////////////////////
    /// \brief Updates the World rotation of the entity.
    /// \param entity The entity to update.
    ////////////////////////////////////////////////////////////   
    void    updateWorldRotation(entityx::Entity entity);

    ////////////////////////////////////////////////////////////
    /// \brief Updates the CNode removals.
    /// \param node The CNode to update.
    ////////////////////////////////////////////////////////////   
    void    assessNodeRemovals(entityx::Entity entity);
    
    ////////////////////////////////////////////////////////////
    /// \brief Updates the CNode additions.
    /// \param node The CNode to update.
    //////////////////////////////////////////////////////////// 
    void    assessNodeAdditions(entityx::Entity entity);
    
    ////////////////////////////////////////////////////////////
    // Member data.
    ////////////////////////////////////////////////////////////    
    Arc::Logger  mLog;
};
